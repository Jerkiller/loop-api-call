const dates = [
  "2024-07-25T00:00:00.000Z","2024-07-25T01:00:00.000Z","2024-07-25T02:00:00.000Z","2024-07-25T03:00:00.000Z","2024-07-25T04:00:00.000Z","2024-07-25T05:00:00.000Z","2024-07-25T06:00:00.000Z","2024-07-25T07:00:00.000Z","2024-07-25T08:00:00.000Z","2024-07-25T09:00:00.000Z","2024-07-25T10:00:00.000Z","2024-07-25T11:00:00.000Z",
  "2024-07-25T12:00:00.000Z","2024-07-25T13:00:00.000Z","2024-07-25T14:00:00.000Z","2024-07-25T15:00:00.000Z","2024-07-25T16:00:00.000Z","2024-07-25T17:00:00.000Z","2024-07-25T18:00:00.000Z","2024-07-25T19:00:00.000Z","2024-07-25T20:00:00.000Z","2024-07-25T21:00:00.000Z","2024-07-25T22:00:00.000Z","2024-07-25T23:00:00.000Z",

  "2024-07-26T00:00:00.000Z","2024-07-26T01:00:00.000Z","2024-07-26T02:00:00.000Z","2024-07-26T03:00:00.000Z","2024-07-26T04:00:00.000Z","2024-07-26T05:00:00.000Z","2024-07-26T06:00:00.000Z","2024-07-26T07:00:00.000Z","2024-07-26T08:00:00.000Z","2024-07-26T09:00:00.000Z","2024-07-26T10:00:00.000Z","2024-07-26T11:00:00.000Z",
  "2024-07-26T12:00:00.000Z","2024-07-26T13:00:00.000Z","2024-07-26T14:00:00.000Z","2024-07-26T15:00:00.000Z","2024-07-26T16:00:00.000Z","2024-07-26T17:00:00.000Z","2024-07-26T18:00:00.000Z","2024-07-26T19:00:00.000Z","2024-07-26T20:00:00.000Z","2024-07-26T21:00:00.000Z","2024-07-26T22:00:00.000Z","2024-07-26T23:00:00.000Z",

  "2024-07-27T00:00:00.000Z","2024-07-27T01:00:00.000Z","2024-07-27T02:00:00.000Z","2024-07-27T03:00:00.000Z","2024-07-27T04:00:00.000Z","2024-07-27T05:00:00.000Z","2024-07-27T06:00:00.000Z","2024-07-27T07:00:00.000Z","2024-07-27T08:00:00.000Z","2024-07-27T09:00:00.000Z","2024-07-27T10:00:00.000Z","2024-07-27T11:00:00.000Z",
  "2024-07-27T12:00:00.000Z","2024-07-27T13:00:00.000Z","2024-07-27T14:00:00.000Z","2024-07-27T15:00:00.000Z","2024-07-27T16:00:00.000Z","2024-07-27T17:00:00.000Z","2024-07-27T18:00:00.000Z","2024-07-27T19:00:00.000Z","2024-07-27T20:00:00.000Z","2024-07-27T21:00:00.000Z","2024-07-27T22:00:00.000Z","2024-07-27T23:00:00.000Z",
];

const baseUrl = 'http://localhost:8080/api/StatisticsFunctionPregressAsync';

const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

// you need to add "async" keyword to your function to use async/await functionality
async function callAPI() {

  for (let index = 0; index < dates.length; index++) {

      // use try/catch for error handling
      try {
          var date = dates[index];
          console.log('calling ', date);
          // call synchronously and wait for the response
          await fetch(`${baseUrl}?from=${date}&to=${date}`);
          await delay(1000);
      } catch (error) {
          console.error(error);
      }
  }
}

callAPI();
